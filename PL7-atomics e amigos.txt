1 a:
Critical: 0m0.236s (real)
Atomic: 0m0.209s (real)
reduction: 0m0.052 seg

O critical é mais pesado porque obriga a fazer um lock. O atomic é por condições?

b) O critical é que ocupa muito tempo

2:
Tempos: 0.011 passa para 3.35
Porque o segundo array está ordenado, e pelo programa, a complexidade passa de Nlog2(N) para N^2, porque o pivô é sempre o primeiro na segunda vez que corre.

#pragma omp task 
quick_sort_internal(...)
Para as duas, assim são feitas em paralelo.

Coisas gerais:

Lei de alalalala
Tens uma componente sequencial, N
Tens uma parte sequencial e uma paralela, com 2 threads  (de custo Nlong2(N))

Logo, custo original = N + Nlog2(N) = 2048 * 11
Custo final = N + 0.5(NLog2(N/2))     = 2048 + 1024 * 10 = 2048 * 6

Ganho = 2048 * 11 / 2048 * 6 = 1.83

Outra vantagem de paralelismo aqui é a cache, reduzes o tamanho dos problemas, logo cada parte trabalha com menos parte da cache. 

